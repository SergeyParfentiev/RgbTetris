// Copyright 2016 Denis T (https://github.com/dragon-dreamer / dragondreamer [ @ ] live.com)
// SPDX-License-Identifier: GPL-3.0

#include "font.h"

#include <avr/pgmspace.h>

namespace
{
//Font data from <space> to 'Z' ASCII codes, 5x8, 5 bytes per symbol
const uint8_t font_data[] PROGMEM = {
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfa, 0xfa, 0x0,
	0x0, 0xc0, 0x0, 0xc0, 0x0, 0x28, 0xfe, 0x28, 0xfe, 0x28,
	0x48, 0x54, 0xfe, 0x54, 0x24, 0x46, 0x26, 0x10, 0xc8, 0xc4,
	0xa, 0x44, 0xaa, 0x92, 0x6c, 0x0, 0x0, 0xc0, 0xa0, 0x0,
	0x0, 0x82, 0x44, 0x38, 0x0, 0x0, 0x38, 0x44, 0x82, 0x0,
	0x28, 0x10, 0x7c, 0x10, 0x28, 0x10, 0x10, 0x7c, 0x10, 0x10,
	0x0, 0x0, 0xc, 0xa, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10,
	0x0, 0x0, 0x6, 0x6, 0x0, 0x40, 0x20, 0x10, 0x8, 0x4,
	0x7c, 0xa2, 0x92, 0x8a, 0x7c, 0x0, 0x2, 0xfe, 0x42, 0x0,
	0x62, 0x92, 0x8a, 0x86, 0x42, 0x8c, 0xd2, 0xa2, 0x82, 0x84,
	0x8, 0xfe, 0x48, 0x28, 0x18, 0x9c, 0xa2, 0xa2, 0xa2, 0xe4,
	0xc, 0x92, 0x92, 0x52, 0x3c, 0xc0, 0xa0, 0x90, 0x8e, 0x80,
	0x6c, 0x92, 0x92, 0x92, 0x6c, 0x78, 0x94, 0x92, 0x92, 0x60,
	0x0, 0x0, 0x6c, 0x6c, 0x0, 0x0, 0x0, 0x6c, 0x6a, 0x0,
	0x0, 0x82, 0x44, 0x28, 0x10, 0x28, 0x28, 0x28, 0x28, 0x28,
	0x10, 0x28, 0x44, 0x82, 0x0, 0x60, 0x90, 0x8a, 0x80, 0x40,
	0x7c, 0x82, 0x9e, 0x92, 0x4c, 0x7e, 0x88, 0x88, 0x88, 0x7e,
	0x6c, 0x92, 0x92, 0x92, 0xfe, 0x44, 0x82, 0x82, 0x82, 0x7c,
	0x38, 0x44, 0x82, 0x82, 0xfe, 0x82, 0x92, 0x92, 0x92, 0xfe,
	0x80, 0x90, 0x90, 0x90, 0xfe, 0x5e, 0x92, 0x92, 0x82, 0x7c,
	0xfe, 0x10, 0x10, 0x10, 0xfe, 0x0, 0x82, 0xfe, 0x82, 0x0,
	0x80, 0xfc, 0x82, 0x2, 0x4, 0x82, 0x44, 0x28, 0x10, 0xfe,
	0x2, 0x2, 0x2, 0x2, 0xfe, 0xfe, 0x40, 0x30, 0x40, 0xfe,
	0xfe, 0x8, 0x10, 0x20, 0xfe, 0x7c, 0x82, 0x82, 0x82, 0x7c,
	0x60, 0x90, 0x90, 0x90, 0xfe, 0x7a, 0x84, 0x8a, 0x82, 0x7c,
	0x62, 0x94, 0x98, 0x90, 0xfe, 0x8c, 0x92, 0x92, 0x92, 0x62,
	0x80, 0x80, 0xfe, 0x80, 0x80, 0xfc, 0x2, 0x2, 0x2, 0xfc,
	0xf8, 0x4, 0x2, 0x4, 0xf8, 0xfc, 0x2, 0x1c, 0x2, 0xfc,
	0xc6, 0x28, 0x10, 0x28, 0xc6, 0xe0, 0x10, 0xe, 0x10, 0xe0,
	0xc2, 0xa2, 0x92, 0x8a, 0x86
};

void get_symbol(char symbol, uint8_t (&result)[font::symbol_width])
{
	uint16_t index = static_cast<uint8_t>(symbol - ' ') * font::symbol_width;
	memcpy_P(result, &font_data[index], font::symbol_width);
}
} //namespace

void font::output_symbol_part(char symbol, uint8_t part, ws2812_matrix::axis_id axis,
	uint8_t zero_coord, uint8_t text_shift, const color::rgb& letter_color)
{
	uint8_t data[font::symbol_width];
	get_symbol(symbol, data);
	
	for(uint8_t y = 0; y != font::symbol_height; ++y)
	{
		if(data[part] & (1 << y))
		{
			if(axis == ws2812_matrix::axis_id::x)
				ws2812_matrix::set_pixel_color(zero_coord, y + text_shift, letter_color);
			else
				ws2812_matrix::set_pixel_color(y + text_shift, zero_coord, letter_color);
		}
	}
}